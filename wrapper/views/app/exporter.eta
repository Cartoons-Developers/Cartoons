<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico" type="image/png">
    <title><%= it.extra.title %></title>
    <link rel="stylesheet" type="text/css" href="/pages/css/modern-normalize.css">
    <link rel="stylesheet" type="text/css" href="/pages/css/global.css">
    <link rel="stylesheet" type="text/css" href="/pages/css/exporter.css">
</head>
<body style="margin:0px">
    <main>
        <h1>Export a video</h1>
        <div class="before_export">
            <button id="startExportButton">Start Export</button>
        </div>
        <div class="during_export" style="display: none;">
            <div class="export_progress"><div class="progress_bar"></div></div>
            <small>Note: progress bar may not be accurate.</small>
            <img id="exporter_frame_preview" src="" alt="Current scene">
        </div>
        <div class="after_export" style="display: none;">
            <p>Export complete! <a id="downloadLink" href="#">Download your video</a></p>
        </div>
        <%~ it.extra.object(it.extra.attrs, it.extra.params) %>
    </main>
    
    <script>
        const id = "<%= it.extra.params.flashvars.movieId %>";
        const player = document.getElementById("obj");
        const $progressBar = document.querySelector(".progress_bar");
        const $exporterFrame = document.getElementById("exporter_frame_preview");
        let currentScene = 0;
        let movieData = {};

        document.getElementById("startExportButton").addEventListener("click", startExport);

        function startExport() {
            fetchMovieData()
                .then(() => {
                    document.querySelector(".before_export").style.display = "none";
                    document.querySelector(".during_export").style.display = "block";
                    player.addEventListener("movieEnded", notifyMovieEnded);
                    player.addEventListener("sceneEnter", onSceneEnter);
                    player.startExport(); // Assuming `startExport` is a method in the player
                })
                .catch((e) => {
                    console.error("Failure to get movie data. Error:", e);
                });
        }

        function fetchMovieData() {
            return fetch(`/api/movie/get_info?id=${id}`, {
                method: "GET"
            })
            .then(response => response.json())
            .then(data => {
                movieData = data;
            });
        }

        function notifyMovieEnded() {
            sendFramesToServer()
                .then(() => {
                    document.querySelector(".during_export").style.display = "none";
                    document.querySelector(".after_export").style.display = "block";
                })
                .catch((e) => {
                    console.error("Failure to send frames to the server. Error:", e);
                });
        }

        function onSceneEnter() {
            currentScene++;
            $progressBar.style.width = (currentScene / movieData.sceneCount) * 100 + "%";
            const currentFrame = player.getPhotoArray(true)[0];
            $exporterFrame.src = "data:image/png;base64," + currentFrame;
        }

        function sendFramesToServer() {
            const scenes = player.getSceneInfoArray();
            const frames = player.getPhotoArray();
            for (const scene of scenes) {
                frames.splice(scene.startFrom, 1);
            }
            return fetch("/export/video_complete", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    frames: frames,
                    id: id
                })
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                document.getElementById("downloadLink").href = data.downloadUrl;
            });
        }
    </script>
</body>
</html>